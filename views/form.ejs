<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Form</title>
        <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
            rel="stylesheet"
            integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
            crossorigin="anonymous">
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
            <link rel="preconnect" href="https://fonts.googleapis.com">
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
        <style>
          .width-res {
            width: 30%;
          }
          @media (max-width: 750px) {
            .width-res {
              width: 90% !important;
            }
          }
          .custom-input-bg{
            background-color: transparent !important
          }
          input::placeholder{
            color:<%=form.text_color%> !important
          }
          input{
            font-family: "Montserrat", sans-serif;
            color: <%=form.text_color%> !important;
          }
          input:focus{
            outline: none !important;
            box-shadow: none !important;
          }
          select:focus{
            outline: none !important;
            box-shadow: none !important;
          }
          select,  button{
            color: <%=form.text_color%> !important;
          }
          option{
            background-color: <%=form.form_color%> !important;
          }
          .w40{
            width: 48%;
          }
          @media screen and (max-width:768px) {
            .w40{
              width: 100%;
            }
          }
        </style>
    </head>
    <p id="formId" hidden><%=form.id%></p>
    <body class="min-vw-100 min-vh-100 bg-light">
        <div class="w-100 min-vh-100 d-flex justify-center align-middle">
            <div class="width-res mx-auto d-flex align-items-center">
                <form id="headform1"
                  style="background-color: <%=form.form_color%> !important;"
                    class="align-middle text-white mx-auto border px-3 py-5 w-100 bg-white shadow-md"
                    method="post">
                    <div class="d-lg-flex d-md-flex  justify-content-between">   
                      <div class="mb-3 w40">
                          <input  style="height: 45px;" type="text" class="form-control border-0 border-bottom border-3 rounded-0 custom-input-bg"
                              id="form-field-dname1" placeholder="Full Name">
                      </div>
                      <div class="mb-3 w40">
                          <input  style="height: 45px;" type="email" class="form-control rounded-0 custom-input-bg border-0 border-bottom border-3"
                              id="form-field-demail1" placeholder="Email">
                      </div>
                    </div>
                    <div class="mb-3">
                        <input type="tel"  style="height: 45px;" class="form-control rounded-0 custom-input-bg border-0 border-bottom border-3"
                            id="form-field-dphone1" placeholder="+6583974987" >
                    </div>
                    <select  style="height: 45px;" class="form-select mb-3 rounded-0 custom-input-bg border-0 border-bottom border-3"
                        aria-label="Default select example">

                        <%for(let i = 0; i < bedroomOptions.length; i++){%>
                          <option value="<%=bedroomOptions[i]%>"><%=bedroomOptions[i]%></option>
                          <%}%>
                    </select>

                    <select  style="height: 45px;" class="form-select mb-3 rounded-0 custom-input-bg border-0 border-bottom border-3"
                        aria-label="Default select example">
                        <%for(let i = 0; i < condoOptions.length; i++){%>
                          <option value="<%=condoOptions[i]%>"><%=condoOptions[i]%></option>
                          <%}%>
                    </select>

                    <select  style="height: 45px;" class="form-select mb-3 rounded-0 custom-input-bg border-0 border-bottom border-3"
                        aria-label="Default select example">
                        <%for(let i = 0; i < requestOptions.length; i++){%>
                          <option value="<%=requestOptions[i]%>"><%=requestOptions[i]%></option>
                          <%}%>                   
                    </select>

                    <div class="text-center">
                        <button style="height: 45px; background-color: <%=form.btn_color%> !important;" type="submit" id="submitBtn1"
                            class="w-100 rounded-0 border-0 hover-overlay btn custom-input-bg ">Send</button>
                    </div>
                    <p id="error_msg1" class="text-danger text-center"></p>
                </form>
            </div>
        </div>

        <script
            src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous"></script>
        <script>
        initializeFormValidation('submitBtn1', 'headform1', 'form-field-dname1', 'form-field-demail1', 'form-field-dphone1', 'error_msg1');

        function initializeFormValidation(ButtonID, FormID, NameID, EmailID, PhoneID, ErrorMsgID) {
        jQuery(document).ready(function($) {
            const errors = [];
            
      async function checkValidity(formID,nameTextID, emailTextID, phoneTextID, errorID) {
        const emailInput = document.getElementById(emailTextID);
        const nameInput = document.getElementById(nameTextID);
        const phoneInput = document.getElementById(phoneTextID);
        const errorElement = document.getElementById(errorID);
        const Form = $('#' + formID);
      
        try {
          const email = emailInput.value.trim();
          const phone = phoneInput.value.trim();
          const name = nameInput.value.trim();
      
          // Reset errors array
          errors.length = 0;
      
          // Validate email
          if (validateEmail(email) === false || validatePhone(phone) === false || contentModerationCustom(name) === false || contentModerationCustom(email) === false || contentModerationCustom(phone) === false) {
            errorElement.innerText = errors.join('\n');
            return false;
          } else {
            errorElement.innerText = '';
          }
      
          const badWordsCheck = await contentModeratorationAPI({
            name,
            email,
            phone
          });

          if (badWordsCheck === false) {
            const dataToSave = {
              client_id : null,
              project_id: null,
              ip_address: ip_address,
              is_verified: 0,
              source_url: source_url,
              email: email,
              name: name,
              ph_number: phone,
              is_send_discord: 0,
              status: 'junk'
            };
            try {
              await saveData(dataToSave);
              console.log('Junk Data saved successfully'); 
            } catch (error) {
              console.error('Error saving data:', error); 
            }
            errorElement.innerText = errors.join('\n');
            return false;
          } else {
            errorElement.innerText = '';
          }
      
          const ip_address = await fetch('https://api.ipify.org?format=json')
            .then(response => response.json())
            .then(data => data.ip);
      
          const source_url = window.location.href;
      
          // Validate email from DB
          const isValidEmailFromDB = await validateEmailFromDB(email, phone, ip_address, source_url);

          if (isValidEmailFromDB.isValid === false) {
            errors.push(isValidEmailFromDB.msg);
            errorElement.innerText = errors.join('\n');
            return false;
          } else {
            errorElement.innerText = '';
          }
          // Display errors
          if (errors.length > 0) {
            errorElement.innerText = errors.join('\n');
            return false;
          } else {
            errorElement.innerText = '';
      
            const dataToSave = {
              client_id: null,
              project_id: null,
              is_verified: 0,
              status:'clear',
              is_send_discord:1,
              source_url: source_url,
              email: email,
              name:name,
              ph_number: phone,
              ip_address: ip_address
            };
            try {
              await saveData(dataToSave);
              console.log('Data saved successfully');
              phoneInput.value = phoneInput.value.replace('+65', '');
              console.log('phoneInput.value',phoneInput.value);
              await sendToDiscord(dataToSave);
              Form.submit();
              return true;
            } catch (error) {
              console.error('Error saving data:', error);
              return false;
            }
          }
        } catch (error) {
          console.error('Error:', error);
        }
      }
      
      function validateEmail(email) {
        if (!email) {
          errors.push("Email cannot be empty.");
          return false;
        } else {
          const pattern = /^[\w\.-]+@[\w\.-]+\.\w+$/;
          if (!pattern.test(email)) {
            errors.push("Invalid email format.");
            return false;
          }
          return true;
        }
      }
      
      function validatePhone(phoneNumber) {
        if (!phoneNumber) {
          errors.push("Phone number cannot be empty.")
          return false;
        } else {
          const phoneRegex = /\+65(8|9)\d{7}/;
          if (!phoneRegex.test(phoneNumber)) {
            errors.push("Invalid phone number format.");
            return false;
          }
          return true;
        }
      }
      
      function contentModerationCustom(text) {
        const blacklistWords = [
          'chee bye',
          'chao chee bye',
          'fucking',
          'agent',
          'mama',
          'fuck',
          'stupid',
          'demo',
        ];
      
        for (let i = 0; i < blacklistWords.length; i++) {
          if (text.toLowerCase().includes(blacklistWords[i].toLowerCase())) {
            errors.push(`Text contains forbidden word: "${blacklistWords[i]}"`);
            return false;
          }
        }
        return true;
      }
      
      async function contentModeratorationAPI(props) {
        const subscriptionKey = '453fe3c404554800bc2c22d7ef681542';
        const url = 'https://jomejourney.cognitiveservices.azure.com/contentmoderator/moderate/v1.0/ProcessText/Screen';
      
        try {
          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'text/plain',
              'Ocp-Apim-Subscription-Key': subscriptionKey,
            },
            body: JSON.stringify(props),
          });
      
          if (response.ok) {
            const responseBody = await response.json();
            if (responseBody.hasOwnProperty('Terms')) {
              if (responseBody.Terms && responseBody.Terms.length > 0) {
                errors.push("Content contains forbidden terms.");
                return false;
              }
            }
            return true;
          } else {
            errors.push("Error, Please try submitting again !");
            return false;
          }
        } catch (error) {
          console.error('Error:', error);
          errors.push("Error accessing moderation API.")
          return false;
        }
      }
      
      async function validateEmailFromDB(email, ph_number, ip, source_url) {
        const validateUrl = 'https://janicez87.sg-host.com/check_time_email.php';
      
        try {
          const response = await fetch(validateUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              email: email,
              source_url: source_url,
              ip: ip,
              ph_number:ph_number
            })
          });
      
          if (response.ok) {
            const validationData = await response.json();
            return validationData;
          } else {
            console.error('Error fetching validation URL:', response.statusText);
            return false;
          }
        } catch (error) {
          console.error('Error:', error);
          return false;
        }
      }
      
      async function saveData(data) {
      
        try { 
          let headers = new Headers([
            ["Content-Type", "application/json"],
            ["Authorization", `Basic am9tZWpvdXJuZXl3ZWJzaXRlQGdtYWlsLmNvbTpQQCQkd29yZDA5MDIxOGxlYWRzISM=`]
          ]);
          let options = {
            method: "Post",
            body: JSON.stringify(data),
            mode: 'cors',
            headers: headers
          };
          const response = await fetch('https://janicez87.sg-host.com/savedata.php', options);
      
          if (!response.ok) {
            throw new Error('Failed to send data');
          }
      
          return await response.json();
        } catch (error) {
          console.error('Error Saving Data:', error);
          throw error;
        }
      }

      jQuery('#' + ButtonID).on('click', function(e) {
        event.preventDefault();
        checkValidity(FormID,NameID,EmailID,PhoneID,ErrorMsgID)
      });

      const phoneNumberInput = document.getElementById(PhoneID);

      phoneNumberInput.addEventListener("focus", function() {
          if (!this.value.startsWith('+65')) {
              this.value = '+65' + this.value.replace(/\D/g, '');
          }
      });
      phoneNumberInput.addEventListener("input", function() {
          let phoneNumber = this.value.replace(/\D/g, ''); // Remove non-numeric characters
          phoneNumber = phoneNumber.slice(0, 10); // Limit to 11 digits
          // Add +65 if not already added
          if (!phoneNumber.startsWith('+65')) {
              phoneNumber = '+65' + phoneNumber.slice(2);
          }

          this.value = phoneNumber; // Update the input value with formatted number
          if (phoneNumber.length === 10) {
              this.setCustomValidity(''); // Clear any previous error message
          } else {
              this.setCustomValidity('Please enter a valid 11-digit Singaporean phone number.');
          }

          // Handle backspaces to maintain correct format
          phoneNumberInput.addEventListener("keydown", function(event) {
              if (event.key === 'Backspace') {
                  let phoneNumber = this.value.replace(/\D/g, ''); // Remove non-numeric characters
                  // Add +65 if not already added
                  if (!phoneNumber.startsWith('+65')) {
                      phoneNumber = '+65' + phoneNumber.slice(2);
                  }
                  this.value = phoneNumber; // Update the input value with formatted number
              }
          });
      });

      $('#' + FormID).submit(function() {
        window.parent.location = document.referrer + "thank-you"
          return false;
      });
  });

  async function sendToDiscord(data) {
    const id = document.getElementById('formId').innerText;
    const selects = document.querySelectorAll('select');
    const selectValues = [];
    selects.forEach(select => {
        selectValues.push(select.value);
    });
      data.selectValues = selectValues;

      const res = await fetch(`/api/form/submit/${id}`, {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({data:data})
      });
      const response = await res.json();
      return;
  }    
}


            </script>
    </body>
</html>